<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbIcon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABGdBTUEAALGPC/xhBQAACSZJREFUeF7t
        Xb2KJkUUnUfYRxhMBEFZxGgNXDZZNBpEEARhWExWA4dNRBEcDAQFGTAwMFnQBxhTA5kHMJjUbCLjBV9g
        PGeolupbt/vrruqf6t5z4AS7U9Vdde+tqlu3btd3JAiCIAiCIAiCIAgbx+uvHN8jwz+Pbn/98R4Z/ins
        GVD8BXgbeA7Fk7eB56GYsEdw1EfKv+Nf3z5rlN/wYSgu7A2eATx+8w1rADehuLBHQOnxEnDH3z792BqB
        loK9AgrnLPAiNoAHr71qDeAFOMgpRP3z6FkXqBf7FBehmFAToKjTSGl3/P3ZJ7EBkKeheC/sc/786jP7
        nJNQVKgJUNZNrLgPHrxlFXcdivYifgZJn+LfX76Ln3MDaotZG6CsM6u8f376JlYceT8U7wTqJT7Fz08+
        tM+RT1EboKhkR5DjDIbnJD6FmQUG+xTCgoCyrmLFPXn0dqw08ioU7QXqJj6FY0xnobhQC6Co2IN3dwOh
        6EGgfsunUHxhA4CiHsZKI43SbkPRg0DdxKf4+4cv7fMO+hTCgoCSEgMwa/dgpaFu4lPIGawcUFJiACVn
        A6g/iU8hLAQo6eASAA723lF/Mp9CWABQUrJuG4UN9gEI1J/MpxAWABTU8txLp2w8Y8iMchyKC2sCynlu
        lVW6d8czhhiA8g3WBJRCb/0yVhI5RfQOz9ESUCugjBMwGfUNndPA0ZE7PGdSn0IoAITP0UivnKO9Fau3
        /Pr9d62inofHjAKedWgbOOiEUcgABM4RzpO560YBQzhVsAbPOrbP/v6jE/tsJYhMCQiZo5zTeu8I98jR
        aYI+V2C2g4ZnJn5FzvGyMAAQ7n2wNd0OIR09TveR4unoPQeLPHM8O1n7FQWcCRBuK9rWRyqciuA0Hw5m
        qHCOdObtTbIdw3uSo2DSOQjS9q8UEGynF0/yCJYjnB59UADTsTjCT8HJp1+8Mxn5pONXaO0vBQTbqXwq
        3Yw4Kn229RbvpMPnLkGa+mcABOtOs5+/98g6WpfgrKFWvLdzCWJiqQkmXYNKBSsFhJt4+VMEbsYA72QE
        sdPx5Mg3yqevIeWXAsJNRv/SayzeSeV3xheU+DEjIODW2r9Grh3em6R+kxz1xvfgqNdef0pA0K0j26Wj
        a3hnEuEjlfW7EKzgnZStWT+9wjuT0Z/7GZkwEhB2kmi59Pf8eGdrBnIOji5DUWFqQODJ+boTX5/bAFrv
        18efCwICT9bfJWcA7/1O2rhSvOaEVcCSPgDelxiATvgWBoTeCgKtEANoGYCWgIUBobfO2XO/488F3nnI
        CczKHhIGAkJPTtwW9gNa28ApkkeFEYDQk3XYOXGbbRbA+5h80nq/Ur0WBoSeHAUvPAskh0Dm3cr2nRMQ
        +NrbQeX7rw0IPT4VbLJ8GgXMnnTBd0bv57vZhub9OgcQBEEQBEGwgNPEz7ZaETWxl5TVPkLM7EjUMXEc
        t28E6IRGfj63fbcgOpBk9IjjGES5TaADngHwcIeRtSr5xxdPrxhlXINMNEUbWgyi3C5sh8BZU7hKEUX3
        FieNwMorNGu7sB0CZQAdlAFUACgi/smXRfmyGICYTx5LM0OKH6hWPZD+R2i4OA+ZL8lTynozk0MjvcaL
        05KGUF9qGho1+i4fMZscbHWlqaNB1gCKsmjhLPELXNeJ2jqZcWxkRdnFcYoh9x7WZQRojP24sih7B4Ja
        zUufm0x2NbLqvGcAf6NBdM2uNII6lgM0xF6pUhTfhqB2awC8+8DI6mCqGcrwsM2bEer4XgENSU4Dw5+y
        AEE9tILbC62cwEFbPZRLUtcD198doBFe47L3sBDUsRXcHugFgcDBCkRZ7/KqOr5XcBpWlEULgfFrHFeQ
        W2XpQRDKewdvdRwnoyH2giXtBAy9HUDo7mCwjnkGub4ziEbYL3uKPuWCwHbnCDoO4OjpG3W8ZWD9kDEa
        4V30mG2ZENhijiA/R3favgRHp4OhTrUGkHzaBRZdrOQpa2ryK2Cn3UtxtAePOt5Aq+PQCA2xuYHV+wEr
        GkCW84Z6VRuA9QOKfkQRCjqzCpuDKy0BWds31KtzCSDQEC89PDvtGcpZNB7Affoc5F0DU8kF9bwbTesw
        AAKNsSHLojv2oJjNbwd547mRSfbMiLrJfcbhT3UADbLLAFmyG4g/Ed8ceeOYI48s3wj1PEe7rl8pQ4O8
        ZaDoZm0IcrNRwQ7/ImvKRj3v10vqu7oGjbK7gVJncJNBIe4weOGUkUV26JZ1zbPIetb/BmiUZ6nZMQEI
        854V7hbYMfqzzkhYzzyHrPOzMjSMhxbWGSxKYIBANzULdIz+LBmgDtd+Lx+g3hvM0Thvv5rtC0ConAU2
        4wt0jP7R/UcdDibvl0zqHP0N0MCuWSA7gQGC3XJgKHf0e7sqsv7PytFIbxYozRfkr3S5ipuCM4aGR41+
        lOcASn6qNrCOVLAhQGM9zzU7WQRKum+VNiVnMoBR0zXKM8Oq6wes+P/ZvtTiQGOZ2ep1JDutGYqadSmY
        YQkYtFVDOY56b9ZsuC3lN0Cjvfg1Z4aSXUF8ieMs9OL6XeQV86Z/DQ8GalCGiuc2z/P0G25T+QQbHjow
        WaegIO4KZvUHhpLLBq+4N30je40cf+NUTyevT/EkfYFtKr8BOsDOeh3dtBH0KJ99bS1z/DfI8/whSidZ
        Zj9X1KIzXbeJbdIIepRPsk9cz6nsnG8nWa/eL4JzgU55GS0kBZblGEIZNIJFj435a6I9yi/hPhUfAx3s
        MgJOeSUJJBdWUXOQDp8T5i0hjZ9O4LbX+TFAZ7uMgMx2eqCgE3CWkDGnfCe5I4c0dPaRSt/3aO8DOk8j
        6HKG+P9Zhx1QFpeESbeJ/CnZjFHPtZ/ktE5/gDGRl1fhHiAQesZetLAh/5ZrCIwaFvkGVLzzQUdMtq+u
        Cxu2BgiwL+7dkILmKBo9gqBIGsLgGYFpXEzkPKB4cvv785oAYXKb2DcbNGy2WKOyYaBcLg3MMbxslN2Q
        0TwqfaBnzzbWl4mzB0CwTTy8yzfwSINo1ln6Fc11K11kmfOnj9+5GbmVY5uK8huFHlC4kbBrpwxhSkCg
        HPmeoKtlaLowBSBQGcDLDghVS4AgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCEIWjo7+A28bgQDh
        dfxRAAAAAElFTkSuQmCC
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAIAAAQDAAAMA
</value>
  </data>
</root>